Attributes(script);

var seen1 = Dictionary();

fcn move(xy, hat) {
  # println("xy:"+xy+" hat:"+hat);
  if (hat[1]) {
    xoff := if ((xy[1] % 2).abs() == 0) {
      if (hat[0] > 0) { hat[0] } else { 0 }
    }
    else {
      if (hat[0] < 0) { hat[0] } else { 0 }
    };
    L(xy[0] + xoff, xy[1] + hat[1])
  } else {
    L(xy[0] + hat[0], xy[1])
  }
}

fcn directionToXY(direction) {
  x := if (direction.holds("e")) { 1 }
       else { -1 };
  y := if (direction.holds("n")) { 1 }
       else if (direction.holds("s")) { -1 }
       else { 0 };
  List(x,y);
}

fcn lineToInstructions(line) {
  Utils.Generator(fcn (li){
    acc := "";
    foreach c in (li) {
      acc += c;
      if (c == "e" or c == "w" or acc.len() == 2) {
        vm.yield(directionToXY(acc));
        acc = "";
      }
    }
    if (acc) {
      throw(Exception.ValueError("unexhausted instruction `"+acc+"\""));
    }
  }, line);
}

instructions := File.stdin.reduce(fcn(acc, line){
  text := line.replace("\n", "");
  acc.append(lineToInstructions(text))
}, L());

foreach ins in (instructions) {
  xy := ins.reduce(move, List(0, 0));
  key := xy.toString();
  v := if (seen1.holds(key)) { (not seen1[key]) }
       else { True };
  seen1[key] = v;
}

println(seen1.howza(9).reduce(fcn(a,b) { a.toInt() + b; }));
